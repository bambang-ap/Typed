import React from 'react';
import { Modal as RNModal, ModalProps as RNModalProps } from 'react-native';
import { ViewProps } from './View';
export declare type ModalProps<C> = ViewProps<C> & Pick<RNModalProps, 'onRequestClose' | 'visible' | 'onDismiss' | 'onShow' | 'animationType'>;
export declare type RefModal = {
    show: () => void;
    hide: () => void;
} & RNModal;
export declare const Modal: <A extends Record<string, string>>(props: import("react-native").Animated.AnimatedProps<Pick<import("react-native").ViewProps, "hitSlop" | "onLayout" | "testID" | "hasTVPreferredFocus" | "tvParallaxProperties" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "pointerEvents" | "removeClippedSubviews" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture">> & {
    children?: React.ReactNode;
    compRef?: ((instance: import("react-native").View | null) => void) | React.RefObject<import("react-native").View> | null | undefined;
    style?: import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle>[] | undefined;
    backgroundColors?: A | undefined;
    backgroundColor?: "" | keyof A | undefined;
} & Partial<KeysToCamelCase<"-", Record<"relative" | "absolute", boolean>>> & Partial<KeysToCamelCase<"-", Record<"z-index" | "top" | "right" | "bottom" | "left", number>>> & Partial<KeysToCamelCase<"-", Record<"row" | "col" | "reverse", boolean>>> & {
    flex?: number | boolean | undefined;
    wrap?: boolean | "wrap" | "nowrap" | "wrap-reverse" | undefined;
    direction?: "row" | "column" | "row-reverse" | "column-reverse" | undefined;
} & {
    items?: "baseline" | "center" | "stretch" | "flex-start" | "flex-end" | undefined;
} & Partial<KeysToCamelCase<"-", Record<"items-baseline" | "items-center" | "items-end" | "items-start" | "items-stretch", boolean>>> & {
    content?: "center" | "stretch" | "flex-start" | "flex-end" | "space-between" | "space-around" | undefined;
} & Partial<KeysToCamelCase<"-", Record<"content-center" | "content-end" | "content-start" | "content-stretch" | "content-around" | "content-between", boolean>>> & {
    justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | undefined;
} & Partial<KeysToCamelCase<"-", Record<"justify-center" | "justify-end" | "justify-start" | "justify-around" | "justify-between" | "justify-evenly", boolean>>> & {
    self?: "baseline" | "center" | "stretch" | "auto" | "flex-start" | "flex-end" | undefined;
} & Partial<KeysToCamelCase<"-", Record<"self-center" | "self-end" | "self-start" | "self-stretch" | "self-auto", boolean>>> & import("../..").Size & Pick<RNModalProps, "onDismiss" | "onShow" | "visible" | "onRequestClose" | "animationType"> & Partial<Record<"ref", React.ForwardedRef<RefModal>>>) => JSX.Element;
declare type IProps<C> = {
    colors?: C;
    defaultBackgroundColor?: keyof C;
    props?: Omit<ModalProps<C>, 'backgroundColors'> & RefProps<RefModal>;
};
export declare const createModal: <C extends Record<string, string>>(iProps: IProps<C>) => React.ForwardRefExoticComponent<Pick<Pick<ModalProps<C>, "children" | "style" | "relative" | "absolute" | "top" | "right" | "bottom" | "left" | "row" | "col" | "reverse" | "zIndex" | "items" | "itemsBaseline" | "itemsCenter" | "itemsEnd" | "itemsStart" | "itemsStretch" | "content" | "contentCenter" | "contentEnd" | "contentStart" | "contentStretch" | "contentAround" | "contentBetween" | "justify" | "justifyCenter" | "justifyEnd" | "justifyStart" | "justifyAround" | "justifyBetween" | "justifyEvenly" | "self" | "selfCenter" | "selfEnd" | "selfStart" | "selfStretch" | "selfAuto" | "hitSlop" | "onLayout" | "testID" | "hasTVPreferredFocus" | "tvParallaxProperties" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "compRef" | "flex" | "wrap" | "direction" | "height" | "width" | "onDismiss" | "onShow" | "pointerEvents" | "removeClippedSubviews" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "backgroundColor" | "visible" | "onRequestClose" | "animationType"> & Partial<Record<"ref", React.ForwardedRef<RefModal>>>, "children" | "style" | "relative" | "absolute" | "top" | "right" | "bottom" | "left" | "row" | "col" | "reverse" | "zIndex" | "items" | "itemsBaseline" | "itemsCenter" | "itemsEnd" | "itemsStart" | "itemsStretch" | "content" | "contentCenter" | "contentEnd" | "contentStart" | "contentStretch" | "contentAround" | "contentBetween" | "justify" | "justifyCenter" | "justifyEnd" | "justifyStart" | "justifyAround" | "justifyBetween" | "justifyEvenly" | "self" | "selfCenter" | "selfEnd" | "selfStart" | "selfStretch" | "selfAuto" | "hitSlop" | "onLayout" | "testID" | "hasTVPreferredFocus" | "tvParallaxProperties" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "compRef" | "flex" | "wrap" | "direction" | "height" | "width" | "onDismiss" | "onShow" | "pointerEvents" | "removeClippedSubviews" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "backgroundColor" | "visible" | "onRequestClose" | "animationType"> & React.RefAttributes<RefModal>>;
export {};
